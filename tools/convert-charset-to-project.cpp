#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <filesystem>
#include <chrono>

typedef unsigned int uint;

bool convert_to_project(const char *data, uint data_size, std::ofstream &out);

std::string current_time_and_date()
{
    auto now = std::chrono::system_clock::now();
    auto in_time_t = std::chrono::system_clock::to_time_t(now);

    std::stringstream ss;
    ss << std::put_time(std::localtime(&in_time_t), "%Y.%m.%d %X");
    return ss.str();
}

char *read_data(const char *filename, uint *data_size) {
    std::ifstream inp(filename, std::ios::binary);
    if(!inp.is_open()) return nullptr;

    uint file_size = std::filesystem::file_size(filename);
    char *buffer = new char[file_size];

    inp.read(buffer, file_size);

    *data_size = file_size;
    return buffer;
}

bool convert_to_project(const char *data, uint data_size, const char *project_file) {
    std::ofstream out(project_file, std::ios::binary|std::ios::trunc);
    if(!out.is_open()) return false;

    bool result = convert_to_project(data, data_size, out);

    out.close();
    return result;
}

std::string convert_char_to_hex(const char *pt) {
    std::stringstream ss;
    for(uint i=0;i<8;++i,++pt) {
        char h = '0' + ((*pt>>4)&0x0f); if(h>'9') h += 7;
        char l = '0' + ((*pt)&0x0f); if(l>'9') l += 7;
        ss << h << l;
    }
    return ss.str();
}

bool convert_to_project(const char *data, uint data_size, std::ofstream &out) {
    out << "# --- RETRO SPRITE WORKSHOP ---" << std::endl;
    out << "ProjectName=Blank Project" << std::endl;
    out << "Comments=Generated by convert-charset-to-project.cpp" << std::endl;
    out << "Platform=" << std::endl;
    out << "CreatedOn=" << current_time_and_date() << std::endl;
    out << "AutomaticExportOnSave=False" << std::endl;
    out << "SourceCodeExportPath=./export.inc" << std::endl;
    out << "AutomaticExportWithComments=True" << std::endl;

    const char *pt = data, *end=data+data_size;
    for(int char_nr=1;pt<end;++char_nr,pt+=8) {
        out << "Sprite" << char_nr << ".ID=char_" << char_nr << std::endl;
        out << "Sprite" << char_nr << ".Description=" << std::endl;
        out << "Sprite" << char_nr << ".HeightInPixels=8" << std::endl;
        out << "Sprite" << char_nr << ".WidthInBytes=1" << std::endl;
        out << "Sprite" << char_nr << ".ByteAlignment=Mixed" << std::endl;
        out << "Sprite" << char_nr << ".MulticolorMode=False" << std::endl;
        out << "Sprite" << char_nr << ".BackgroundColor=#7869C4" << std::endl;
        out << "Sprite" << char_nr << ".CharacterColor=#40318D" << std::endl;
        out << "Sprite" << char_nr << ".Multi1Color=#0000FF" << std::endl;
        out << "Sprite" << char_nr << ".Multi2Color=#FF0000" << std::endl;
        out << "Sprite" << char_nr << ".Palette=Commodore64" << std::endl;
        out << "Sprite" << char_nr << ".Data=" << convert_char_to_hex(pt) << std::endl;
        out << "Sprite" << char_nr << ".PrerenderSoftwareSprite=False" << std::endl;
        out << "Sprite" << char_nr << ".RenderingPrecision=High8Frames" << std::endl;
        out << "Sprite" << char_nr << ".ZoomFactor=1" << std::endl;
    }

    return true;
}

int main(int ac, char **av) {
    char *pt;
    char *charset_file = nullptr, *project_file=nullptr;

    for(int i=1;i<ac;++i) {
        pt = av[i];
        if(*pt == '-') {
            pt += 2;
            switch(pt[-1]) {
                case 'p':
                    project_file = *pt ? pt : av[++i];
                    break;
            }
        } else {
            charset_file = pt;
        }
    }

    if(!charset_file) {
        std::cerr << "ERROR: No input file" << std::endl;
        return 1;
    }
    if(!project_file) {
        std::cerr << "ERROR: No output file" << std::endl;
        return 1;
    }

    uint data_size;
    const char *data = read_data(charset_file, &data_size);
    if(!data) {
        std::cerr << "ERROR: Data read error" << std::endl;
        return 1;
    }

    std::cerr << "Loaded data for " << (data_size>>3) << " characters" << std::endl;

    bool success = convert_to_project(data, data_size, project_file);
    delete data;

    if(!success) {
        std::cerr << "ERROR: Error creating project" << std::endl;
        return 1;
    }


    return 0;
}
